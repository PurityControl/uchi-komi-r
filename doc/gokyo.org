#+TITLE: Dai-gokyo (Group 5) - Documentation

Material here is heavily borrowed from the R Programming Swirl package.
This was part of the learning materials used in the R data science courses
provided by Coursera.

* Basics
assignment is done using the ~<-~ operator

~x <- 10~

vectors are created with the ~c()~ method

~x <- c(3, 5, 7)~

if you perform an expression on a vector it applies that expression to each
element in the vector and returns a new vector with those values

#+BEGIN_SRC R
x <- c(3, 5, 7)
x + 1
=>[4, 6, 8]
#+END_SRC

What is actually happening here is a vector operation and in order to do this
R casts the 1 in the addition to a vector of 1's in order to be able to do
the calculation

#+BEGIN_SRC R
# What happens behind the scenes
x <- c(3, 5, 7)
x + 1
[3, 5, 7] + [1, 1, 1]
=>[4, 6, 8]
#+END_SRC

If you add to different size vectors the smaller vector is repeated until
it is the same size of the larger vector.

If the vectors aren't wholly divisible the operation will still happen but
R will give a warning letting you know.

#+BEGIN_SRC R
c(1, 2, 3) + c(1,2)
[1] 2 4 4
Warning message:
In c(1, 2, 3) + c(1, 2) :
  longer object length is not a multiple of shorter object length
#+END_SRC

** HELP
The following methods are useful for finding help in R

~help()~ or its alias ~?~

using ~?~ will pull up the help documentation for the method in question.
If the method being queried is a keyword then it will need to be quoted.

#+BEGIN_SRC R
?lapply
# however these need quotes
?'for'
?'?'
?'??'
#+END_SRC

~help.search()~ or its alias ~??~

Using ~??~ will search the documentation for all help that has the search
term in its content and return a list of search topics that match.

* Workspace and Files
~getwd()~ returns the current working directory

~ls()~ will list all objects in your current workspace.

~dir()~ or ~list.files()~ will show the files in your current working
directory.

~args(fn)~ will tell you what arguments fn takes.

~dir.create(dirname)~ will create a directory with dirname. This is useful
for creating a temporary work area to be cleaned up later.

~setwd(dirname)~ sets the current working directory to dirname.

~file.create(filename)~ will create a file named filename.

~file.exists(filename)~ returns TRUE if filename exists.

~file.info(filename)~ returns detailed information on a file. You can use the
'$' vector operator to access specific information ~file.info(filename)$mode~

~file.rename(from, to)~ will rename a file.

~file.copy(from, to)~ will copy a file.

~file.path()~ will create a platform dependent filepath from the arguments.

You can chain commands together. To create a nested directory you will need
to pass the ~recursive = TRUE~ to ~dir.create()~
#+BEGIN_SRC R
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
# equivalent to mkdir -p testdir2/testdir3
#+END_SRC

~unlink()~ will delete a file or directory. If you need to remove a directory,
and by association all its contents, you need to let R know this is your
intention. You do this by passing in ~recursive = TRUE~ to the function.

* Sequences
The simplest way to create a sequence is with the ~:~ operator.

#+BEGIN_SRC R
>1:20
[1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
#+END_SRC

This will also create a sequence of real numbers

#+BEGIN_SRC R
>pi:10
[1] 3.141593 4.141593 5.141593 6.141593 7.141593 8.141593 9.141593
#+END_SRC

The upper limit never exceeds the number after the colon.

You can also decrement
#+BEGIN_SRC R
>15:1
 [1] 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1
#+END_SRC

If we want more control over our sequence we can use the ~seq()~ function.

#+BEGIN_SRC R
>seq(1, 20)
[1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
>seq(0, 10, by = 0.5)
[1]  0.0  0.5  1.0  1.5  2.0  2.5  3.0  3.5  4.0  4.5  5.0  5.5  6.0  6.5  7.0  7.5  8.0  8.5  9.0  9.5 10.0
# or specify the number of items we want
>seq(5, 10, length = 30)
[1]  5.000000  5.172414  5.344828  5.517241  5.689655  5.862069  6.034483  6.206897  6.379310  6.551724
[11]  6.724138  6.896552  7.068966  7.241379  7.413793  7.586207  7.758621  7.931034  8.103448  8.275862
[21]  8.448276  8.620690  8.793103  8.965517  9.137931  9.310345  9.482759  9.655172  9.827586 10.000000
#+END_SRC

We can use several different functions to make a sequence from 1 up to the length of a vector.
#+BEGIN_SRC R
>my_seq <- seq(5, 10, length = 30)
>1:length(my_seq)
>seq(along.with = my_seq)
>seq_along(my_seq)
# all produce
[1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30
#+END_SRC

The function ~rep()~ is useful when you want to create vectors of repeating numbers
#+BEGIN_SRC R
rep(0, times = 40)
[1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
>rep(c(0, 1, 2), times = 10)
[1] 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2
>rep(c(0, 1, 2), each = 10)
[1] 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2
#+END_SRC

* Vectors

Vectors come in two types: atomic vectors and lists. An atomic vector contains
ony one type of data, whereas a list may contain multiple types.

** Logic Vectors
Logical vectors can be created by applying boolean logic to a vector.

#+BEGIN_SRC R
num_vect <- [0.5, 55, -10, 6]
tf <- num_vect < 1
[1]  TRUE FALSE  TRUE FALSE
#+END_SRC

For more information on this see the Subsetting and Vectors section. 

** Joining Vectors
Character vectors can be joined using the ~paste()~ function.

#+BEGIN_SRC R
my_char <- c("My", "name", "is")
paste(my_char, collapse = " ")
[1] "My name is"
#+END_SRC

The ~collapse~ argument to the paste() function tells R that when we join
together the elements of the my_char character vector, we'd like
to separate them with single spaces.

** Concatenating Vectors

You can append to the end of the vector with concatenate.

#+BEGIN_SRC R
my_name <- c(my_char, "Purity")
paste(my_char, collapse = " ")
[1] "My name is Purity"
#+END_SRC

In this example, we used the paste() function to collapse the elements of a
single character vector.

~paste()~ can also be used to join the elements of multiple character vectors.

#+BEGIN_SRC R
paste("Hello", "world!", sep = " ")
[1] "Hello world!"

paste(c("Hello", "My"), c("Crazy", "world!"), sep = " ")
[1] "Hello Crazy" "My world!"

paste(1:3, c("X", "Y", "Z"), sep="")
[1] "1X" "2Y" "3Z"

paste(LETTERS, 1:4, sep = "-")
 [1] "A-1" "B-2" "C-3" "D-4" "E-1" "F-2" "G-3" "H-4" "I-1" "J-2" "K-3" "L-4"
"M-1" "N-2" "O-3" "P-4" "Q-1" "R-2" "S-3" "T-4" "U-1" "V-2" "W-3"
[24] "X-4" "Y-1" "Z-2"
# Also worth noting is that the numeric vector 1:4 gets 'coerced' into a character
# vector by the paste() function.
#+END_SRC

* Missing Values

In R a missing value or one that is not available is represented by ~NA~

Any operation involving ~NA~ generally yields ~NA~ as the result.

#+BEGIN_SRC R
x <- c(44, NA, 5 , NA)

x * 3
[1] 132  NA  15  NA
#+END_SRC

Checking for NA using == yields NA regardless of the value compared.

Therefore, use ~is.na()~ to check for NA fields.

#+BEGIN_SRC R
x == NA
[1] NA  NA  NA  NA

is.na(x)
[1] TRUE  FALSE  TRUE  FALSE  
#+END_SRC

To find the number of ~TRUES~ in a list of booleans take advantage of
the fact that ~false = 0~ and ~true = 1~. Use the sum function to
give the number of TRUES.

#+BEGIN_SRC R
sum(is.na(x))

[1] 2
#+END_SRC

Another type of missing value is ~NaN~ which stands for not a number.

#+BEGIN_SRC R
0 / 0
[1] NaN

Inf - Inf
[1] NaN
#+END_SRC R


* Subsetting and Vectors

Subsetting is selecting the parts of a vector you are interested in.

*** Key Point
To subset you pass in a vector of the elements you want

The vectors you can pass in come in four flavours
- logical vectors
- vectors of positive integers
- vectors of negative integers
- vectors of character strings

** Logical Vectors
True and False act as a mask where only the TRUE vals show through.

=is.na(x)=
will give a vector where all NA values are True.

By using the not operator (!) you can reverse this and get only elements that
have a value.

=x[!is.na(x)]=

we can subset on other conditions using boolean logic.

=x[x>6]=

The above examples can be combined.

=x[!is.na(x) & x > 6]=

*** In R vectors are 1 based
Remember in R vectors are 1 based and not zero based.

You are responsible for ensuring that the index of the vector you access
exists.

If you go below the bounds you get a numeric(0) value

if you go above the bound you get an NA value

eg. for x <- 1:10

=x[0] => numeric(0)=

=x[11] => NA=

** Vectors of positive integers
Passing in a vector of positive integers allows you to pass in non contigous
indices.

eg. to select the 3rd, 5th and 7th vector

=x[c(3, 5, 7)]=

** Vectors of negative integers
If you want all items of a vector except a few you can pass in a negative
vector of all the indices you don't want.

eg. to get all items of a vector except the 2nd and 10th element

=x[c(-2, -10)]=

alternatively you can put the - in front of the call to combine(); this will
apply the - operator to each element in the vector

=x[-c(2, 10)]=

** Vectors of character strings
If a vector is named we can access the values we want by passing in a
vector of names.

We can see if a vector has names by using the names function.

=names(vect)=

If it doesn't we can give the vector names if we want to.

=names(vect) <- c("foo", "bar", "baz")=

Then we can access the vector using a vector of character strings

=vect[c("foo", "baz")]=

* Matrices and Data Frames

Matrices contain a single type of data.

Data Frames can contain mixed data.

Another way of thinking about this is that a matrix is a vector of vectors,
but a data frame is a vector of lists.

A matrix is just a vector with dimensions

=my_vector <- 1:20=

=length(my_vector)             => 20=

=dim(my_vector)                => NULL=

=dim(my_vector) <- c(4, 5)=

=class(my_vector)              => Matrix=

you can also see the dim property using the =attributes()= function

Matrices are declared by row then column.
You can create a matrix directly using the =matrix()= function

=matrix(1:20, 4, 5)=

You can use the =cbind()= function to add an additional column to a matrix
where the column to be added is a vector.

=cbind(vector_col, matrix)=

Using cbind on a matrix with different data types will cause the new matrix
to be cast to a data type that is common to both the column being added and
the old matrix. This is usually a character string.

To keep both items as their original data type, use a data frame.

=data.frame(vector_col, matrix)=

data.frame can take as many arguments as items needed to be joined.

You can assign names to the data frame columns by passing in a vector of
names ot the =colnames()= function.

=colnames(my_data) <- c("col1", "col2", "col3")=

* Logic
R has the usual logic values TRUE, FALSE, ==, !=, <, <=, >, >=

** OR
Or can be in the form of =|= or =||=

The singular operates over each element of the vector returning a vector of
booleans.

The double bar returns a result based on an or operation of the first vector
element only.

** And
And can be in the form of =&= or =&&=

The singular operates over each element of the vector returning a vector of
booleans.

The double ampersand returns a result based on an and operation of the 
first vector element only.

** Addtional Functions
=isTRUE()= takes one argument and if it is true returns true otherwise returns
false.

=indentical()= checks two object for exaxt Equality.

=xor()= will xor its arguments.

=which()= returns a vector of indices for which the expression holds true

~which(x <= 2)~ # returns a vector of indices where the vector x is less than
or equal to two.

=any()= returns true if any of the elements in the vector expression is true.

=all()= returns true if all of the elelement in the vector expression are true.


