#+TITLE: Dai-gokyo (Group 5) - Documentation

* Subsetting and Vectors

Subsetting is selecting the parts of a vector you are interested in.

*** Key Point
To subset you pass in a vector of the elements you want

The vectors you can pass in come in four flavours
- logical vectors
- vectors of positive integers
- vectors of negative integers
- vectors of character strings

** Logical Vectors
True and False act as a mask where only the TRUE vals show through.

=is.na(x)=
will give a vector where all NA values are True.

By using the not operator (!) you can reverse this and get only elements that
have a value.

=x[!is.na(x)]=

we can subset on other conditions using boolean logic.

=x[x>6]=

The above examples can be combined.

=x[!is.na(x) & x > 6]=

*** In R vectors are 1 based
Remember in R vectors are 1 based and not zero based.

You are responsible for ensuring that the index of the vector you access
exists.

If you go below the bounds you get a numeric(0) value

if you go above the bound you get an NA value

eg. for x <- 1:10

=x[0] => numeric(0)=

=x[11] => NA=

** Vectors of positive integers
Passing in a vector of positive integers allows you to pass in non contigous
indices.

eg. to select the 3rd, 5th and 7th vector

=x[c(3, 5, 7)]=

** Vectors of negative integers
If you want all items of a vector except a few you can pass in a negative
vector of all the indices you don't want.

eg. to get all items of a vector except the 2nd and 10th element

=x[c(-2, -10)]=

alternatively you can put the - in front of the call to combine(); this will
apply the - operator to each element in the vector

=x[-c(2, 10)]=

** Vectors of character strings
If a vector is named we can access the values we want by passing in a
vector of names.

We can see if a vector has names by using the names function.

=names(vect)=

If it doesn't we can give the vector names if we want to.

=names(vect) <- c("foo", "bar", "baz")=

Then we can access the vector using a vector of character strings

=vect[c("foo", "baz")]=

* Matrices and Data Frames

Matrices contain a single type of data.

Data Frames can contain mixed data.

Another way of thinking about this is that a matrix is a vector of vectors,
but a data frame is a vector of lists.

A matrix is just a vector with dimensions

=my_vector <- 1:20=

=length(my_vector)             => 20=

=dim(my_vector)                => NULL=

=dim(my_vector) <- c(4, 5)=

=class(my_vector)              => Matrix=

you can also see the dim property using the =attributes()= function

Matrices are declared by row then column.
You can create a matrix directly using the =matrix()= function

=matrix(1:20, 4, 5)=

You can use the =cbind()= function to add an additional column to a matrix
where the column to be added is a vector.

=cbind(vector_col, matrix)=

Using cbind on a matrix with different data types will cause the new matrix
to be cast to a data type that is common to both the column being added and
the old matrix. This is usually a character string.

To keep both items as their original data type, use a data frame.

=data.frame(vector_col, matrix)=

data.frame can take as many arguments as items needed to be joined.

You can assign names to the data frame columns by passing in a vector of
names ot the =colnames()= function.

=colnames(my_data) <- c("col1", "col2", "col3")=

* Logic
R has the usual logic values TRUE, FALSE, ==, !=, <, <=, >, >=

** OR
Or can be in the form of =|= or =||=

The singular operates over each element of the vector returning a vector of
booleans.

The double bar returns a result based on an or operation of the first vector
element only.

** And
And can be in the form of =&= or =&&=

The singular operates over each element of the vector returning a vector of
booleans.

The double ampersand returns a result based on an and operation of the 
first vector element only.

** Addtional Functions
=isTRUE()= takes one argument and if it is true returns true otherwise returns
false.

=indentical()= checks two object for exaxt Equality.

=xor()= will xor its arguments.

=which()= returns a vector of indices for which the expression holds true

~which(x <= 2)~ # returns a vector of indices where the vector x is less than
or equal to two.

=any()= returns true if any of the elements in the vector expression is true.

=all()= returns true if all of the elelement in the vector expression are true.


