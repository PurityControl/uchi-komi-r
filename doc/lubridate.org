#+TITLE: Dates and Times with Lubridate

Information set out here is heavily borrowed from the Swirl package
Getting and Cleaning Data.

* Load the package and get help

#+BEGIN_SRC R
library(lubridate)
help(package = lubridate)
#+END_SRC

* Dates

get todays date with the ~today()~ function.

#+BEGIN_SRC R
this_day <- today()
[1] "2015-08-26"

year(this_day)
[1] 2015

month(this_day)
[1] 8

day(this_day)
[1] 26

wday(this_day)
[1] 4
# where 1 = Sunday, 2 = Monday, 3 = Tuesday, etc

wday(this_day, TRUE)
[1] Wed
Levels: Sun < Mon < Tues < Wed < Thurs < Fri < Sat

#+END_sRC

* DateTimes

Lubridate also handles date-times.

#+BEGIN_SRC R
this_moment <- now()
[1] "2015-08-26 13:43:37 BST"

# it has all the functions of time above
# addtionally it has

hour(this_moment)
[1] 13

minute(this_moment)
[1] 43

#+END_SRC

Lubridate offers a variety of functions for
parsing date-times.

These functions take the form of ymd(),
dmy(), hms(), ymd_hms(), etc., where each letter in the name
of the function stands for the location of years (y), months
(m), days (d), hours (h), minutes (m), and/or seconds (s) in
the date-time being read in.

#+BEGIN_SRC R
my_date <- ymd("1989-05-17")
[1] "1989-05-17 UTC

class(my_date)
[1] "POSIXct" "POSIXt" 

#lubridate can figure out many different date-time formats

ymd("1989 May 17")
[1] "1989-05-17 UTC"

mdy("March 12, 1975")
[1] "1975-03-12 UTC"

dmy(25081985)
[1] "1985-08-25 UTC"

# it generates an error message when it fails to parse properly
ymd("192012")
[1] NA
Warning message:
All formats failed to parse. No formats found. 

# dashes will help lubridate in such an instance
ymd("1920-1-2")
[1] "1920-01-02 UTC"

# lubridate can also parse date-times
ymd_hms("2014-08-23 17:23:02")
[1] "2014-08-23 17:23:02 UTC"

# or parse just a time
hms("03:22:14")
[1] "3H 22M 14S"

# lubridate handles vectors of dates in much the same way
dt2
[1] "2014-05-14" "2014-09-22" "2014-07-1"1

ymd(dt2)
[1] "2014-05-14 UTC" "2014-09-22 UTC" "2014-07-11 UTC"

#+END_SRC

* Updating

Lubridate can modify times too.

#+BEGIN_SRC R
update(this_moment, hours = 8, minutes = 34, seconds = 55)
[1] "2015-08-26 08:34:55 BST"

# this does not chane the this_moment variable
# if you wanted this you would have to reassign the output to that variable

#+END_SRC

* Examples

#+BEGIN_SRC R
nyc <- now("America/New_York")
[1] "2015-08-26 10:01:09 EDT"

depart <- nyc + days(2)
[1] "2015-08-28 10:20:19 EDT"

depart <- update(depart, hours = 17, minutes = 34)
[1] "2015-08-28 17:34:19 EDT"

arrive = depart + hours(15) + minutes(50)
[1] "2015-08-29 09:24:19 EDT"

arrive <- with_tz(arrive, "Asia/Hong_Kong")
[1] "2015-08-29 21:24:19 HKT"

last_time <- mdy("June 17, 2008", tz = "Singapore")
[1] "2008-06-17 SGT"

how_long <- new_interval(last_time, arrive)
[1] 2008-06-17 SGT--2015-08-29 21:24:19 SGT

as.period(how_long)
[1] "7y 2m 12d 21H 24M 19.0738871097565S"
Warning message:
In Ops.factor(left, right) : '-' not meaningful for factors

#+END_SRC

This is where things get a little tricky. Because of things
like leap years, leap seconds, and daylight savings time, the
length of any given minute, day, month, week, or year is
relative to when it occurs. In contrast, the length of a
second is always the same, regardless of when it occurs.

To address these complexities, the authors of lubridate
introduce four classes of time related objects: instants,
intervals, durations, and periods. These topics are beyond
the scope of this lesson, but you can find a complete
discussion in the 2011 Journal of Statistical Software paper
titled 'Dates and Times Made Easy with lubridate'.


