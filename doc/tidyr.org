#+TITLE: Manipulating data with tidyr

Information set out here is heavily borrowed from the Swirl package
Getting and Cleaning Data.

* Each Column should be a variable

For clean data each column should be a distince variable.
Examples include sex, count

The following represents unclean data.

#+BEGIN_SRC TXT
  grade male female
1     A    1      5
2     B    5      0
3     C    5      2
4     D    5      5
5     E    7      4
#+END_SRC

The reason for this is that is that the male and females columns should
be just a single column "sex" and an additional column called count
should give a number dimension to these.

In many ways this is similar to denormalizing data in a database.

** Gather

Using ~gather()~ can help fix the data

#+BEGIN_SRC R
gather(data_frame, sex, count -grade)

# gather takes a
# - data frame
# - key
# - vaule
# - list of columns to collapse into key / value pairs

# passing in -grade collapse all columns except grade ie.
# sex and count

# the resulting output is.

   grade    sex count
1      A   male     1
2      B   male     5
3      C   male     5
4      D   male     5
5      E   male     7
6      A female     5
7      B female     0
8      C female     2
9      D female     5
10     E female     4
#+END_SRC

* Multiple values in one column

Look at the following dataset

#+BEGIN_SRC TXT
  grade male_1 female_1 male_2 female_2
1     A      3        4      3        4
2     B      6        4      3        5
3     C      7        4      3        8
4     D      4        0      8        1
5     E      1        1      2        7
#+END_SRC

This dataset is similar to the first, except now there are two separate
classes, 1 and 2, and we have total counts for each sex within each class.
The data frame suffers from the same messy data problem of having column
headers that are values (male_1, female_1, etc.) and not variable names
(sex, class, and count).              |

However, it also has multiple variables stored in each column (sex and class),
which is another common symptom of messy data. Tidying this dataset will be a
two step process.

The first stage to fixing this data is to unite the classes and sexes into
a single column

#+BEGIN_SRC R
gather(data_frame, sex_class, count, -grade)

   grade sex_class count
1      A    male_1     3
2      B    male_1     6
3      C    male_1     7
4      D    male_1     4
5      E    male_1     1
6      A  female_1     4
7      B  female_1     4
8      C  female_1     4
9      D  female_1     0
10     E  female_1     1
11     A    male_2     3
12     B    male_2     3
13     C    male_2     3
14     D    male_2     8
15     E    male_2     2
16     A  female_2     4
17     B  female_2     5
18     C  female_2     8
19     D  female_2     1
20     E  female_2     7
#+END_SRC

** Separate

The sex_class column still holds two variables, sex and class.
We can use the ~separate()~ function to convert this column into multiples
columns of single variables.

~separate()~ separates data by splitting on non alphanumeric characters but
you can pass in a regex if you need to change this behaviour. For more
information see ~?gather~.

#+BEGIN_SRC R
# separate takes the following arguments
# - the data frame
# - the column to split
# - a vector of columns to split the data into

# calling separate on the data above gives us

separate(res, sex_class, c("sex", "class"))

   grade    sex class count
1      A   male     1     3
2      B   male     1     6
3      C   male     1     7
4      D   male     1     4
5      E   male     1     1
6      A female     1     4
7      B female     1     4
8      C female     1     4
9      D female     1     0
10     E female     1     1
11     A   male     2     3
12     B   male     2     3
13     C   male     2     3
14     D   male     2     8
15     E   male     2     2
16     A female     2     4
17     B female     2     5
18     C female     2     8
19     D female     2     1
20     E female     2     7
#+END_SRC

** Chaining with %>%

In order to prevent having to create an intermediate variable for the two
stage process above we can use the ~%>%~ operator to chain the process and
get the same result.

#+BEGIN_SRC R
data_frame %>%
  gather( sex_class, count, -grade ) %>%
  separate( sex_class, c("sex", "class")) %>%
  print
#+END_SRC

* Variables across rows and columns

A third symptom of messy data is when variables are stored in both rows and
columns. The following data frame provides an example of this.

#+BEGIN_SRC
    name    test class1 class2 class3 class4 class5
1  Sally midterm      A   <NA>      B   <NA>   <NA>
2  Sally   final      C   <NA>      C   <NA>   <NA>
3   Jeff midterm   <NA>      D   <NA>      A   <NA>
4   Jeff   final   <NA>      E   <NA>      C   <NA>
5  Roger midterm   <NA>      C   <NA>   <NA>      B
6  Roger   final   <NA>      A   <NA>   <NA>      A
7  Karen midterm   <NA>   <NA>      C      A   <NA>
8  Karen   final   <NA>   <NA>      C      A   <NA>
9  Brian midterm      B   <NA>   <NA>   <NA>      A
10 Brian   final      B   <NA>   <NA>   <NA>      C
#+END_SRC

The first variable, name, is already a column and should remain as it is.
The headers of the last five columns, class1 through class5, are all different
values of what should be a class variable. The values in the test column,
midterm and final, should each be its own variable containing the respective
grades for each student.

The first stage is to gather class1 through class5 into a variable,
discarding any rows that would have NA's in them.

#+BEGIN_SRC
my_data_frame %>%
  gather( class, grade, class1:class5 , na.rm = TRUE) %>%
  print

    name    test  class grade
1  Sally midterm class1     A
2  Sally   final class1     C
3  Brian midterm class1     B
4  Brian   final class1     B
5   Jeff midterm class2     D
6   Jeff   final class2     E
7  Roger midterm class2     C
8  Roger   final class2     A
9  Sally midterm class3     B
10 Sally   final class3     C
11 Karen midterm class3     C
12 Karen   final class3     C
13  Jeff midterm class4     A
14  Jeff   final class4     C
15 Karen midterm class4     A
16 Karen   final class4     A
17 Roger midterm class5     B
18 Roger   final class5     A
19 Brian midterm class5     A
20 Brian   final class5     C
#+END_SRC

The next stage involves making the values in the test column variables that have
the grade as their value. This can be done with the ~spread()~ function.

#+BEGIN_SRC R
my_data_frame %>%
  gather(class, grade, class1:class5, na.rm = TRUE) %>%
  spread(test , grade) %>%
  print

    name  class final midterm
1  Brian class1     B       B
2  Brian class5     C       A
3   Jeff class2     E       D
4   Jeff class4     C       A
5  Karen class3     C       C
6  Karen class4     A       A
7  Roger class2     A       C
8  Roger class5     A       B
9  Sally class1     C       A
10 Sally class3     C       B
#+END_SRC

Finally we want to remove the class prefix from the values in the class
column. This can be done with the ~mutate()~ and ~extract_numeric()~ functions.

#+BEGIN_SRC R
my_data_frame %>%
  gather(class, grade, class1:class5, na.rm = TRUE) %>%
  spread(test, grade) %>%
  mutate(class = extract_numeric(class)) %>%
  print

    name class final midterm
1  Brian     1     B       B
2  Brian     5     C       A
3   Jeff     2     E       D
4   Jeff     4     C       A
5  Karen     3     C       C
6  Karen     4     A       A
7  Roger     2     A       C
8  Roger     5     A       B
9  Sally     1     C       A
10 Sally     3     C       B
#+END_SRC

* Multi Observational Units in the same table

#+BEGIN_SRC R
    id  name sex class midterm final
1  168 Brian   F     1       B     B
2  168 Brian   F     5       A     C
3  588 Sally   M     1       A     C
4  588 Sally   M     3       B     C
5  710  Jeff   M     2       D     E
6  710  Jeff   M     4       A     C
7  731 Roger   F     2       C     A
8  731 Roger   F     5       B     A
9  908 Karen   M     3       C     C
10 908 Karen   M     4       A     A
#+END_SRC

The data above is an example of having multi observational units in the same
table. Each student has a unique id as well as his or her sex.

A hint that this problem exists is when data is repeated. In the data above
some names and sex data are repeated when only the id is needed.

This data can be split into two data frames to normalise the data.

#+BEGIN_SRC R
# Pulling out id, name and sex requires a select that is piped through
# unique to remove duplicates.

student_info <- my_data_frame %>%
  select(id, name, sex) %>%
  unique() %>%
  print

   id  name sex
1 168 Brian   F
3 588 Sally   M
5 710  Jeff   M
7 731 Roger   F
9 908 Karen   M

# The other columns are unique elements so just need selected into a new
# data frame

gradebook <- my_data_frame %>%
  select(id, class, midterm, final) %>%
  print

    id class midterm final
1  168     1       B     B
2  168     5       A     C
3  588     1       A     C
4  588     3       B     C
5  710     2       D     E
6  710     4       A     C
7  731     2       C     A
8  731     5       B     A
9  908     3       C     C
10 908     4       A     A
#+END_SRC

Relational theory still applies so, as we would with a database, we need a
column to tie the two tables together. In this case it is the id column.

