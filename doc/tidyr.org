#+TITLE: Manipulating data with tidyr

Information set out here is heavily borrowed from the Swirl package
Getting and Cleaning Data.

* Each Column should be a variable

For clean data each column should be a distince variable.
Examples include sex, count

The following represents unclean data.

#+BEGIN_SRC TXT
  grade male female
1     A    1      5
2     B    5      0
3     C    5      2
4     D    5      5
5     E    7      4
#+END_SRC

The reason for this is that is that the male and females columns should
be just a single column "sex" and an additional column called count
should give a number dimension to these.

In many ways this is similar to denormalizing data in a database.

** Gather

Using ~gather()~ can help fix the data

#+BEGIN_SRC R
gather(data_frame, sex, count -grade)

# gather takes a
# - data frame
# - key
# - vaule
# - list of columns to collapse into key / value pairs

# passing in -grade collapse all columns except grade ie.
# sex and count

# the resulting output is.

   grade    sex count
1      A   male     1
2      B   male     5
3      C   male     5
4      D   male     5
5      E   male     7
6      A female     5
7      B female     0
8      C female     2
9      D female     5
10     E female     4
#+END_SRC

* Multiple values in one column

Look at the following dataset

#+BEGIN_SRC TXT
  grade male_1 female_1 male_2 female_2
1     A      3        4      3        4
2     B      6        4      3        5
3     C      7        4      3        8
4     D      4        0      8        1
5     E      1        1      2        7
#+END_SRC

This dataset is similar to the first, except now there are two separate
classes, 1 and 2, and we have total counts for each sex within each class.
students2 suffers from the same messy data problem of having column 
headers that are values (male_1, female_1, etc.) and not variable names
(sex, class, and count).              |

However, it also has multiple variables stored in each column (sex and class),
which is another common symptom of messy data. Tidying this dataset will be a
two step process.

The first stage to fixing this data is to unite the classes and sexes into
a single column

#+BEGIN_SRC R
gather(data_frame, sex_class, count, -grade)

   grade sex_class count
1      A    male_1     3
2      B    male_1     6
3      C    male_1     7
4      D    male_1     4
5      E    male_1     1
6      A  female_1     4
7      B  female_1     4
8      C  female_1     4
9      D  female_1     0
10     E  female_1     1
11     A    male_2     3
12     B    male_2     3
13     C    male_2     3
14     D    male_2     8
15     E    male_2     2
16     A  female_2     4
17     B  female_2     5
18     C  female_2     8
19     D  female_2     1
20     E  female_2     7
#+END_SRC

** Separate

The sex_class column still holds two variables, sex and class.
We can use the ~separate()~ function to convert this column into multiples
columns of single variables.

~separate()~ separates data by splitting on non alphanumeric characters but
you can pass in a regex if you need to change this behaviour. For more
information see ~?gather~.

#+BEGIN_SRC R
# separate takes the following arguments
# - the data frame
# - the column to split
# - a vector of columns to split the data into

# calling separate on the data above gives us

separate(res, sex_class, c("sex", "class"))

   grade    sex class count
1      A   male     1     3
2      B   male     1     6
3      C   male     1     7
4      D   male     1     4
5      E   male     1     1
6      A female     1     4
7      B female     1     4
8      C female     1     4
9      D female     1     0
10     E female     1     1
11     A   male     2     3
12     B   male     2     3
13     C   male     2     3
14     D   male     2     8
15     E   male     2     2
16     A female     2     4
17     B female     2     5
18     C female     2     8
19     D female     2     1
20     E female     2     7 
#+END_SRC
 
** Chaining with %>%

In order to prevent having to create an intermediate variable for the two
stage process above we can use the ~%>%~ operator to chain the process and
get the same result.

#+BEGIN_SRC R
data_frame %>%
  gather( sex_class, count, -grade ) %>%
  separate( sex_class, c("sex", "class")) %>%
  print
#+END_SRC
