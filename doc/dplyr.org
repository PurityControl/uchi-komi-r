#+TITLE: Manipulating data with dplyr

Information set out here is heavily borrowed from the Swirl package
Getting and Cleaning Data.

dplyr gives you the same set of tools to work with
- data frames
- data tables
- databases
- multi dimensional array

load the dplyr package with ~library(dplyr)~

dplyr should be at least version 0.4.0 check this with ~packageVersion("dplyr")~

to convert your existing type (eg. data frame) into a dplyr data frame table

~my_tbl_df <- tbl_df(my_data_Frame)~

The goal of dplyr is to have small functions that do one thing well.
Dplyr supplies five verbs that cover most fundamental tasks.
- select()
- filter()
- arrange()
- mutate()
- summarize()

** Select
~select(my_tbl_df, col_name1, col_name2,...)~

*** Order
Columns are ordered in the order presented in the select method call.

You can use the sequence operator ~:~ on column names to select contiguous
columns.

Column Names can be referenced directly rather than having to use the
traditional syntax ie. ~col_name~ not ~my_df$col_name~.

~select(my_tbl_df, col_start_name:col_end_name)~

This order can be reversed if the columns are switched.

~select(my_tbl_df, col_end_name:col_start_name)~

*** Removal of columns
You can select the columns you want to remove instead of keep.

~select(my_tbl_df, -col_name_unwanted)~

You can remove contigous column using the ~-~ operator on a vector trick

~select(my_tbl_df, -(col_start_name:col_end_name))~

** Filter
Where select refines you column selection filter refines your row selection.

~filter(my_tbl_df, col_name == "SearchString")~

*** And
You can chain criteria as an and by adding multiple arguments to the function.

~filter(my_tbl_df, col_name == "SearchString", other_col == "AnotherString")~

*** Comparators
All the comparsion filters can be used ~<, >, <=, >=, ==, !=~

For more information ~?Comparators~

*** OR
You can use OR criteria passsing in to conditions separated by ~|~ as a
single argument.

~filter(my_tbl_df, col_name == "Criteria1" | col_name == "Criteria2")~

*** NA
You can filter out NA's in columns

~filter(my_tbl_df, !is.na(col_name))~

** Order
You can order rows (equivalent to an sql order) with ~arrange()~

~arrange(my_tbl_df, sorted_col)~

*** Reverse Order
This can be reversed using ~desc()~

~arrange(my_tbl_df, desc(sorted_col))~

*** Multiple Criteria
There can be multiple sort criteria

~arrange(my_tbl_df, col1, desc(col2), col3)~

** Mutate
You can modify columns into new columns using ~mutate()~

~mutate(my_tbl_df, size_mb = size / 2^20)~

*** Earlier column references
You can refer to earlier created columns in later arguments

~mutate(my_tbl_df, size_mb = size / 2^20, size_gb = size_mb / 2^10)~

** Summarize
You can collapse a summary of the dataset into a single row using ~summarize()~

#+BEGIN_SRC R
~summarize(my_table_df, avg_bytes = mean(size))~

  avg_bytes
1  844086.5
#+END_SRC

~summarize()~ is most useful when working with data that has been grouped
by the values of a particular variable.


* Grouping and Chaining with dplyr

Use ~group_by()~ to aggregate rows by a certain property.

~group_by(my_tbl_df, col_name)~

Summarize is then much more useful when summarizing by groups.

~by_col <- group_by(my_tbl_df, col_name)~
~summarize(by_col, mean(col_name))~

Useful parameter to pass into summarize are ~n()~ and ~n_distinct()~
- ~n()~ gives the number of values in the summary
#+BEGIN_SRC R
summarize(by_col, mean(col_name), count = n())
#+END_SRC
- ~n_distinct(col_name)~ gives the number of distinct values in col_name
#+BEGIN_SRC R
summarize(by_col, count = n(), unique = n_distinct(col_name))
#+END_SRC

** Quantile
Quantile will take a decimal and return a number which represents the value
that represent the decimal position in the distribution curve.

~quantile(data_frame$col_name, probs = 0.5)~ will give the mid value of the column
according to the columns distribution curve.

** View
The package dplyr only shows a summary of its data; the first 10 items of the
data.

To see all the data fro a data table use ~View(my_tbl_df)~

** RM
To remove a variable from the current scope use ~rm(var)~

** Chaining
Chaining or Piping is a way to make successive method calls to prevent having
to create intermediate results and without having to nest method calls in a
way that is confusing.

The ~%>%~ operator is used for this chaining.

This can replace

#+BEGIN_SRC R
result <-
  arrange(
    filter(
      summarize(
        group_by(my_table_df,
                 col2
        ),
        count = n(),
        unique = n_distinct(col1),
        countries = n_distinct(sol2),
        avg_bytes = mean(col3)
      ),
      countries > 60
    ),
    desc(col1),
    avg_bytes
  )

# with

result <-
  my_table_df %>%
  group_by(col2) %>%
  summarize(count = n(),
            unique = n_distinct(col1),
            countries = n_distinct(col2),
            avg_bytes = mean(col3)
  ) %>%
  filter(countries > 60) %>%
  arrange(desc(col1), avg_bytes)
#+END_SRC




